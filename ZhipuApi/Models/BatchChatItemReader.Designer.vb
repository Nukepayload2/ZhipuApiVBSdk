' <auto-generated/>
' This source file is part of the JSON serialization code and is not intended to be modified by you.
' Re-run the source generator will overwrite your changes in this file.
' Generated by: Nukepayload2.IO.Json.Serialization.NewtonsoftJson
Option Strict On
Option Infer On
Option Explicit On
Option Compare Binary
Imports Nukepayload2.AI.Providers.Zhipu.Models
Imports System.IO
Imports Newtonsoft.Json.Linq
Imports Nukepayload2.IO.Json.Serialization.NewtonsoftJson

Namespace Serialization
    Partial Class BatchChatItemReader
        ''' <summary>
        ''' Reads <see cref="BatchChatResponseItem"/> from JsonReader.
        ''' </summary>
        Public Shared Function ReadBatchChatResponseItem(reader As Global.Newtonsoft.Json.JsonReader, readState As JsonReadErrorHandler) As BatchChatResponseItem
            If reader.TokenType = Global.Newtonsoft.Json.JsonToken.None Then
                reader.Read()
            End If
        
            If reader.TokenType <> Global.Newtonsoft.Json.JsonToken.StartObject Then
                readState.OnConflictingTokenType("BatchChatResponseItem", JsonReadErrorHandler.Positions.StartObject, reader)
                Return Nothing
            End If
        
            Dim entity As New BatchChatResponseItem
        
            Dim startDepth As Integer = reader.Depth
            If Not reader.Read() Then
                Throw readState.OnUnrecoverableError("Error reading from JsonReader. File was truncated.")
            End If
        
            Do
                Select Case reader.TokenType
                    Case Global.Newtonsoft.Json.JsonToken.PropertyName
                        Dim name As String = CType(reader.Value, String)
                        Select Case name
                            Case "custom_id"
                                If Not reader.Read() Then
                                    Throw readState.OnUnrecoverableError("Error reading from JsonReader. File was truncated.")
                                End If
                                If reader.TokenType = Global.Newtonsoft.Json.JsonToken.Null Then
                                    entity.CustomId = Nothing
                                ElseIf reader.TokenType = Global.Newtonsoft.Json.JsonToken.StartObject Or reader.TokenType = Global.Newtonsoft.Json.JsonToken.StartArray Then
                                    readState.OnConflictingTokenType("BatchChatResponseItem", name, reader)
                                Else
                                    entity.CustomId = Convert.ToString(reader.Value)
                                End If
                            Case "id"
                                If Not reader.Read() Then
                                    Throw readState.OnUnrecoverableError("Error reading from JsonReader. File was truncated.")
                                End If
                                If reader.TokenType = Global.Newtonsoft.Json.JsonToken.Null Then
                                    entity.Id = Nothing
                                ElseIf reader.TokenType = Global.Newtonsoft.Json.JsonToken.StartObject Or reader.TokenType = Global.Newtonsoft.Json.JsonToken.StartArray Then
                                    readState.OnConflictingTokenType("BatchChatResponseItem", name, reader)
                                Else
                                    entity.Id = Convert.ToString(reader.Value)
                                End If
                            Case "response"
                                If Not reader.Read() Then
                                    Throw readState.OnUnrecoverableError("Error reading from JsonReader. File was truncated.")
                                End If
                                If reader.TokenType = Global.Newtonsoft.Json.JsonToken.Null Then
                                    entity.Response = Nothing
                                Else
                                    entity.Response = ReadBatchResponseListItemContentOfResponseBase(reader, readState)
                                End If
                            Case Else
                                readState.OnMissingProperty("BatchChatResponseItem", name, reader)
                        End Select
                    Case Global.Newtonsoft.Json.JsonToken.EndObject
                        Exit Do
                    Case Else
                        Throw readState.OnUnrecoverableError("Unexpected token while loading JObject. The reader is at unexpected position.")
                End Select
            Loop While reader.Read()
        
            Dim endDepth As Integer = reader.Depth
            If endDepth <> startDepth Then
                Throw readState.OnUnrecoverableError("Error reading from JsonReader. The reader is at unexpected position.")
            End If
        
            Return entity
        End Function ' ReadBatchChatResponseItem
        ''' <summary>
        ''' Reads <see cref="BatchResponseListItemContent(Of ResponseBase)"/> from JsonReader.
        ''' </summary>
        Private Shared Function ReadBatchResponseListItemContentOfResponseBase(reader As Global.Newtonsoft.Json.JsonReader, readState As JsonReadErrorHandler) As BatchResponseListItemContent(Of ResponseBase)
            If reader.TokenType = Global.Newtonsoft.Json.JsonToken.None Then
                reader.Read()
            End If
        
            If reader.TokenType <> Global.Newtonsoft.Json.JsonToken.StartObject Then
                readState.OnConflictingTokenType("BatchResponseListItemContentOfResponseBase", JsonReadErrorHandler.Positions.StartObject, reader)
                Return Nothing
            End If
        
            Dim entity As New BatchResponseListItemContent(Of ResponseBase)
        
            Dim startDepth As Integer = reader.Depth
            If Not reader.Read() Then
                Throw readState.OnUnrecoverableError("Error reading from JsonReader. File was truncated.")
            End If
        
            Do
                Select Case reader.TokenType
                    Case Global.Newtonsoft.Json.JsonToken.PropertyName
                        Dim name As String = CType(reader.Value, String)
                        Select Case name
                            Case "status_code"
                                If Not reader.Read() Then
                                    Throw readState.OnUnrecoverableError("Error reading from JsonReader. File was truncated.")
                                End If
                                If reader.TokenType = Global.Newtonsoft.Json.JsonToken.Null Then
                                    entity.StatusCode = Nothing
                                ElseIf reader.TokenType = Global.Newtonsoft.Json.JsonToken.StartObject Or reader.TokenType = Global.Newtonsoft.Json.JsonToken.StartArray Then
                                    readState.OnConflictingTokenType("BatchResponseListItemContentOfResponseBase", name, reader)
                                Else
                                    entity.StatusCode = Convert.ToInt64(reader.Value)
                                End If
                            Case "body"
                                If Not reader.Read() Then
                                    Throw readState.OnUnrecoverableError("Error reading from JsonReader. File was truncated.")
                                End If
                                If reader.TokenType = Global.Newtonsoft.Json.JsonToken.Null Then
                                    entity.Body = Nothing
                                Else
                                    entity.Body = ReadResponseBase(reader, readState)
                                End If
                            Case Else
                                readState.OnMissingProperty("BatchResponseListItemContentOfResponseBase", name, reader)
                        End Select
                    Case Global.Newtonsoft.Json.JsonToken.EndObject
                        Exit Do
                    Case Else
                        Throw readState.OnUnrecoverableError("Unexpected token while loading JObject. The reader is at unexpected position.")
                End Select
            Loop While reader.Read()
        
            Dim endDepth As Integer = reader.Depth
            If endDepth <> startDepth Then
                Throw readState.OnUnrecoverableError("Error reading from JsonReader. The reader is at unexpected position.")
            End If
        
            Return entity
        End Function ' ReadBatchResponseListItemContentOfResponseBase

        Private Shared Function ReadResponseBase(reader As Global.Newtonsoft.Json.JsonReader, readState As JsonReadErrorHandler) As ResponseBase
            Return ResponseReader.ReadResponseBase(reader, readState)
        End Function ' ReadResponseBase

    End Class ' BatchChatItemReader
End Namespace
