' <auto-generated/>
' This source file is part of the JSON serialization code and is not intended to be modified by you.
' Re-run the source generator will overwrite your changes in this file.
' Generated by: Nukepayload2.IO.Json.Serialization.NewtonsoftJson
Option Strict On
Option Infer On
Option Explicit On
Option Compare Binary
Imports Nukepayload2.AI.Providers.Zhipu.Models
Imports System.IO
Imports Nukepayload2.IO.Json.Serialization.NewtonsoftJson

Namespace Serialization
    Partial Class ResponseReader
        ''' <summary>
        ''' Reads <see cref="ResponseBase"/> from JsonReader.
        ''' </summary>
        Public Shared Function ReadResponseBase(reader As Global.Newtonsoft.Json.JsonReader, readState As JsonReadErrorHandler) As ResponseBase
            If reader.TokenType = Global.Newtonsoft.Json.JsonToken.None Then
                reader.Read()
            End If

            If reader.TokenType <> Global.Newtonsoft.Json.JsonToken.StartObject Then
                readState.OnConflictingTokenType("ResponseBase", JsonReadErrorHandler.Positions.StartObject, reader)
                Return Nothing
            End If

            Dim entity As New ResponseBase

            Dim startDepth As Integer = reader.Depth
            If Not reader.Read() Then
                Throw readState.OnUnrecoverableError("Error reading from JsonReader. File was truncated.")
            End If

            Do
                Select Case reader.TokenType
                    Case Global.Newtonsoft.Json.JsonToken.PropertyName
                        Dim name As String = CType(reader.Value, String)
                        Select Case name
                            Case "id"
                                If Not reader.Read() Then
                                    Throw readState.OnUnrecoverableError("Error reading from JsonReader. File was truncated.")
                                End If
                                If reader.TokenType = Global.Newtonsoft.Json.JsonToken.Null Then
                                    entity.Id = Nothing
                                ElseIf reader.TokenType = Global.Newtonsoft.Json.JsonToken.StartObject Or reader.TokenType = Global.Newtonsoft.Json.JsonToken.StartArray Then
                                    readState.OnConflictingTokenType("ResponseBase", name, reader)
                                Else
                                    entity.Id = Convert.ToString(reader.Value)
                                End If
                            Case "request_id"
                                If Not reader.Read() Then
                                    Throw readState.OnUnrecoverableError("Error reading from JsonReader. File was truncated.")
                                End If
                                If reader.TokenType = Global.Newtonsoft.Json.JsonToken.Null Then
                                    entity.RequestId = Nothing
                                ElseIf reader.TokenType = Global.Newtonsoft.Json.JsonToken.StartObject Or reader.TokenType = Global.Newtonsoft.Json.JsonToken.StartArray Then
                                    readState.OnConflictingTokenType("ResponseBase", name, reader)
                                Else
                                    entity.RequestId = Convert.ToString(reader.Value)
                                End If
                            Case "created"
                                If Not reader.Read() Then
                                    Throw readState.OnUnrecoverableError("Error reading from JsonReader. File was truncated.")
                                End If
                                If reader.TokenType = Global.Newtonsoft.Json.JsonToken.Null Then
                                    entity.Created = Nothing
                                ElseIf reader.TokenType = Global.Newtonsoft.Json.JsonToken.StartObject Or reader.TokenType = Global.Newtonsoft.Json.JsonToken.StartArray Then
                                    readState.OnConflictingTokenType("ResponseBase", name, reader)
                                Else
                                    entity.Created = Convert.ToInt64(reader.Value)
                                End If
                            Case "model"
                                If Not reader.Read() Then
                                    Throw readState.OnUnrecoverableError("Error reading from JsonReader. File was truncated.")
                                End If
                                If reader.TokenType = Global.Newtonsoft.Json.JsonToken.Null Then
                                    entity.Model = Nothing
                                ElseIf reader.TokenType = Global.Newtonsoft.Json.JsonToken.StartObject Or reader.TokenType = Global.Newtonsoft.Json.JsonToken.StartArray Then
                                    readState.OnConflictingTokenType("ResponseBase", name, reader)
                                Else
                                    entity.Model = Convert.ToString(reader.Value)
                                End If
                            Case "usage"
                                If Not reader.Read() Then
                                    Throw readState.OnUnrecoverableError("Error reading from JsonReader. File was truncated.")
                                End If
                                If reader.TokenType = Global.Newtonsoft.Json.JsonToken.Null Then
                                    entity.Usage = Nothing
                                Else
                                    entity.Usage = ReadUsageData(reader, readState)
                                End If
                            Case "choices"
                                If Not reader.Read() Then
                                    Throw readState.OnUnrecoverableError("Error reading from JsonReader. File was truncated.")
                                End If
                                If reader.TokenType = Global.Newtonsoft.Json.JsonToken.Null Then
                                    entity.Choices = Nothing
                                Else
                                    entity.Choices = ReadIReadOnlyListOfResponseChoiceItem(reader, readState)
                                End If
                            Case "web_search"
                                If Not reader.Read() Then
                                    Throw readState.OnUnrecoverableError("Error reading from JsonReader. File was truncated.")
                                End If
                                If reader.TokenType = Global.Newtonsoft.Json.JsonToken.Null Then
                                    entity.WebSearch = Nothing
                                Else
                                    entity.WebSearch = ReadWebSearchResponse(reader, readState)
                                End If
                            Case "content_filter"
                                If Not reader.Read() Then
                                    Throw readState.OnUnrecoverableError("Error reading from JsonReader. File was truncated.")
                                End If
                                If reader.TokenType = Global.Newtonsoft.Json.JsonToken.Null Then
                                    entity.ContentFilter = Nothing
                                Else
                                    entity.ContentFilter = ReadContentFilter(reader, readState)
                                End If
                            Case "error"
                                If Not reader.Read() Then
                                    Throw readState.OnUnrecoverableError("Error reading from JsonReader. File was truncated.")
                                End If
                                If reader.TokenType = Global.Newtonsoft.Json.JsonToken.Null Then
                                    entity.Error = Nothing
                                Else
                                    entity.Error = ReadDictionaryOfStringAndString(reader, readState)
                                End If
                            Case Else
                                readState.OnMissingProperty("ResponseBase", name, reader)
                        End Select
                    Case Global.Newtonsoft.Json.JsonToken.EndObject
                        Exit Do
                    Case Else
                        Throw readState.OnUnrecoverableError("Unexpected token while loading JObject. The reader is at unexpected position.")
                End Select
            Loop While reader.Read()

            Dim endDepth As Integer = reader.Depth
            If endDepth <> startDepth Then
                Throw readState.OnUnrecoverableError("Error reading from JsonReader. The reader is at unexpected position.")
            End If

            Return entity
        End Function ' ReadResponseBase
        ''' <summary>
        ''' Reads <see cref="UsageData"/> from JsonReader.
        ''' </summary>
        Private Shared Function ReadUsageData(reader As Global.Newtonsoft.Json.JsonReader, readState As JsonReadErrorHandler) As UsageData
            If reader.TokenType = Global.Newtonsoft.Json.JsonToken.None Then
                reader.Read()
            End If

            If reader.TokenType <> Global.Newtonsoft.Json.JsonToken.StartObject Then
                readState.OnConflictingTokenType("UsageData", JsonReadErrorHandler.Positions.StartObject, reader)
                Return Nothing
            End If

            Dim entity As New UsageData

            Dim startDepth As Integer = reader.Depth
            If Not reader.Read() Then
                Throw readState.OnUnrecoverableError("Error reading from JsonReader. File was truncated.")
            End If

            Do
                Select Case reader.TokenType
                    Case Global.Newtonsoft.Json.JsonToken.PropertyName
                        Dim name As String = CType(reader.Value, String)
                        Select Case name
                            Case "prompt_tokens"
                                If Not reader.Read() Then
                                    Throw readState.OnUnrecoverableError("Error reading from JsonReader. File was truncated.")
                                End If
                                If reader.TokenType = Global.Newtonsoft.Json.JsonToken.Null Then
                                    entity.PromptTokens = Nothing
                                ElseIf reader.TokenType = Global.Newtonsoft.Json.JsonToken.StartObject Or reader.TokenType = Global.Newtonsoft.Json.JsonToken.StartArray Then
                                    readState.OnConflictingTokenType("UsageData", name, reader)
                                Else
                                    entity.PromptTokens = Convert.ToInt32(reader.Value)
                                End If
                            Case "completion_tokens"
                                If Not reader.Read() Then
                                    Throw readState.OnUnrecoverableError("Error reading from JsonReader. File was truncated.")
                                End If
                                If reader.TokenType = Global.Newtonsoft.Json.JsonToken.Null Then
                                    entity.CompletionTokens = Nothing
                                ElseIf reader.TokenType = Global.Newtonsoft.Json.JsonToken.StartObject Or reader.TokenType = Global.Newtonsoft.Json.JsonToken.StartArray Then
                                    readState.OnConflictingTokenType("UsageData", name, reader)
                                Else
                                    entity.CompletionTokens = Convert.ToInt32(reader.Value)
                                End If
                            Case "total_tokens"
                                If Not reader.Read() Then
                                    Throw readState.OnUnrecoverableError("Error reading from JsonReader. File was truncated.")
                                End If
                                If reader.TokenType = Global.Newtonsoft.Json.JsonToken.Null Then
                                    entity.TotalTokens = Nothing
                                ElseIf reader.TokenType = Global.Newtonsoft.Json.JsonToken.StartObject Or reader.TokenType = Global.Newtonsoft.Json.JsonToken.StartArray Then
                                    readState.OnConflictingTokenType("UsageData", name, reader)
                                Else
                                    entity.TotalTokens = Convert.ToInt32(reader.Value)
                                End If
                            Case Else
                                readState.OnMissingProperty("UsageData", name, reader)
                        End Select
                    Case Global.Newtonsoft.Json.JsonToken.EndObject
                        Exit Do
                    Case Else
                        Throw readState.OnUnrecoverableError("Unexpected token while loading JObject. The reader is at unexpected position.")
                End Select
            Loop While reader.Read()

            Dim endDepth As Integer = reader.Depth
            If endDepth <> startDepth Then
                Throw readState.OnUnrecoverableError("Error reading from JsonReader. The reader is at unexpected position.")
            End If

            Return entity
        End Function ' ReadUsageData
        ''' <summary>
        ''' Reads <see cref="ResponseChoiceItem"/> from JsonReader.
        ''' </summary>
        Private Shared Function ReadResponseChoiceItem(reader As Global.Newtonsoft.Json.JsonReader, readState As JsonReadErrorHandler) As ResponseChoiceItem
            If reader.TokenType = Global.Newtonsoft.Json.JsonToken.None Then
                reader.Read()
            End If

            If reader.TokenType <> Global.Newtonsoft.Json.JsonToken.StartObject Then
                readState.OnConflictingTokenType("ResponseChoiceItem", JsonReadErrorHandler.Positions.StartObject, reader)
                Return Nothing
            End If

            Dim entity As New ResponseChoiceItem

            Dim startDepth As Integer = reader.Depth
            If Not reader.Read() Then
                Throw readState.OnUnrecoverableError("Error reading from JsonReader. File was truncated.")
            End If

            Do
                Select Case reader.TokenType
                    Case Global.Newtonsoft.Json.JsonToken.PropertyName
                        Dim name As String = CType(reader.Value, String)
                        Select Case name
                            Case "finish_reason"
                                If Not reader.Read() Then
                                    Throw readState.OnUnrecoverableError("Error reading from JsonReader. File was truncated.")
                                End If
                                If reader.TokenType = Global.Newtonsoft.Json.JsonToken.Null Then
                                    entity.FinishReason = Nothing
                                ElseIf reader.TokenType = Global.Newtonsoft.Json.JsonToken.StartObject Or reader.TokenType = Global.Newtonsoft.Json.JsonToken.StartArray Then
                                    readState.OnConflictingTokenType("ResponseChoiceItem", name, reader)
                                Else
                                    entity.FinishReason = Convert.ToString(reader.Value)
                                End If
                            Case "index"
                                If Not reader.Read() Then
                                    Throw readState.OnUnrecoverableError("Error reading from JsonReader. File was truncated.")
                                End If
                                If reader.TokenType = Global.Newtonsoft.Json.JsonToken.Null Then
                                    entity.Index = Nothing
                                ElseIf reader.TokenType = Global.Newtonsoft.Json.JsonToken.StartObject Or reader.TokenType = Global.Newtonsoft.Json.JsonToken.StartArray Then
                                    readState.OnConflictingTokenType("ResponseChoiceItem", name, reader)
                                Else
                                    entity.Index = Convert.ToInt32(reader.Value)
                                End If
                            Case "message"
                                If Not reader.Read() Then
                                    Throw readState.OnUnrecoverableError("Error reading from JsonReader. File was truncated.")
                                End If
                                If reader.TokenType = Global.Newtonsoft.Json.JsonToken.Null Then
                                    entity.Message = Nothing
                                Else
                                    entity.Message = ReadResponseChoiceDelta(reader, readState)
                                End If
                            Case "delta"
                                If Not reader.Read() Then
                                    Throw readState.OnUnrecoverableError("Error reading from JsonReader. File was truncated.")
                                End If
                                If reader.TokenType = Global.Newtonsoft.Json.JsonToken.Null Then
                                    entity.Delta = Nothing
                                Else
                                    entity.Delta = ReadResponseChoiceDelta(reader, readState)
                                End If
                            Case Else
                                readState.OnMissingProperty("ResponseChoiceItem", name, reader)
                        End Select
                    Case Global.Newtonsoft.Json.JsonToken.EndObject
                        Exit Do
                    Case Else
                        Throw readState.OnUnrecoverableError("Unexpected token while loading JObject. The reader is at unexpected position.")
                End Select
            Loop While reader.Read()

            Dim endDepth As Integer = reader.Depth
            If endDepth <> startDepth Then
                Throw readState.OnUnrecoverableError("Error reading from JsonReader. The reader is at unexpected position.")
            End If

            Return entity
        End Function ' ReadResponseChoiceItem
        ''' <summary>
        ''' Reads <see cref="ResponseChoiceDelta"/> from JsonReader.
        ''' </summary>
        Private Shared Function ReadResponseChoiceDelta(reader As Global.Newtonsoft.Json.JsonReader, readState As JsonReadErrorHandler) As ResponseChoiceDelta
            If reader.TokenType = Global.Newtonsoft.Json.JsonToken.None Then
                reader.Read()
            End If

            If reader.TokenType <> Global.Newtonsoft.Json.JsonToken.StartObject Then
                readState.OnConflictingTokenType("ResponseChoiceDelta", JsonReadErrorHandler.Positions.StartObject, reader)
                Return Nothing
            End If

            Dim entity As New ResponseChoiceDelta

            Dim startDepth As Integer = reader.Depth
            If Not reader.Read() Then
                Throw readState.OnUnrecoverableError("Error reading from JsonReader. File was truncated.")
            End If

            Do
                Select Case reader.TokenType
                    Case Global.Newtonsoft.Json.JsonToken.PropertyName
                        Dim name As String = CType(reader.Value, String)
                        Select Case name
                            Case "role"
                                If Not reader.Read() Then
                                    Throw readState.OnUnrecoverableError("Error reading from JsonReader. File was truncated.")
                                End If
                                If reader.TokenType = Global.Newtonsoft.Json.JsonToken.Null Then
                                    entity.Role = Nothing
                                ElseIf reader.TokenType = Global.Newtonsoft.Json.JsonToken.StartObject Or reader.TokenType = Global.Newtonsoft.Json.JsonToken.StartArray Then
                                    readState.OnConflictingTokenType("ResponseChoiceDelta", name, reader)
                                Else
                                    entity.Role = Convert.ToString(reader.Value)
                                End If
                            Case "content"
                                If Not reader.Read() Then
                                    Throw readState.OnUnrecoverableError("Error reading from JsonReader. File was truncated.")
                                End If
                                If reader.TokenType = Global.Newtonsoft.Json.JsonToken.Null Then
                                    entity.Content = Nothing
                                ElseIf reader.TokenType = Global.Newtonsoft.Json.JsonToken.StartObject Or reader.TokenType = Global.Newtonsoft.Json.JsonToken.StartArray Then
                                    readState.OnConflictingTokenType("ResponseChoiceDelta", name, reader)
                                Else
                                    entity.Content = Convert.ToString(reader.Value)
                                End If
                            Case "tool_calls"
                                If Not reader.Read() Then
                                    Throw readState.OnUnrecoverableError("Error reading from JsonReader. File was truncated.")
                                End If
                                If reader.TokenType = Global.Newtonsoft.Json.JsonToken.Null Then
                                    entity.ToolCalls = Nothing
                                Else
                                    entity.ToolCalls = ReadIReadOnlyListOfToolCallItem(reader, readState)
                                End If
                            Case Else
                                readState.OnMissingProperty("ResponseChoiceDelta", name, reader)
                        End Select
                    Case Global.Newtonsoft.Json.JsonToken.EndObject
                        Exit Do
                    Case Else
                        Throw readState.OnUnrecoverableError("Unexpected token while loading JObject. The reader is at unexpected position.")
                End Select
            Loop While reader.Read()

            Dim endDepth As Integer = reader.Depth
            If endDepth <> startDepth Then
                Throw readState.OnUnrecoverableError("Error reading from JsonReader. The reader is at unexpected position.")
            End If

            Return entity
        End Function ' ReadResponseChoiceDelta
        ''' <summary>
        ''' Reads <see cref="ToolCallItem"/> from JsonReader.
        ''' </summary>
        Private Shared Function ReadToolCallItem(reader As Global.Newtonsoft.Json.JsonReader, readState As JsonReadErrorHandler) As ToolCallItem
            If reader.TokenType = Global.Newtonsoft.Json.JsonToken.None Then
                reader.Read()
            End If

            If reader.TokenType <> Global.Newtonsoft.Json.JsonToken.StartObject Then
                readState.OnConflictingTokenType("ToolCallItem", JsonReadErrorHandler.Positions.StartObject, reader)
                Return Nothing
            End If

            Dim entity As New ToolCallItem

            Dim startDepth As Integer = reader.Depth
            If Not reader.Read() Then
                Throw readState.OnUnrecoverableError("Error reading from JsonReader. File was truncated.")
            End If

            Do
                Select Case reader.TokenType
                    Case Global.Newtonsoft.Json.JsonToken.PropertyName
                        Dim name As String = CType(reader.Value, String)
                        Select Case name
                            Case "id"
                                If Not reader.Read() Then
                                    Throw readState.OnUnrecoverableError("Error reading from JsonReader. File was truncated.")
                                End If
                                If reader.TokenType = Global.Newtonsoft.Json.JsonToken.Null Then
                                    entity.Id = Nothing
                                ElseIf reader.TokenType = Global.Newtonsoft.Json.JsonToken.StartObject Or reader.TokenType = Global.Newtonsoft.Json.JsonToken.StartArray Then
                                    readState.OnConflictingTokenType("ToolCallItem", name, reader)
                                Else
                                    entity.Id = Convert.ToString(reader.Value)
                                End If
                            Case "function"
                                If Not reader.Read() Then
                                    Throw readState.OnUnrecoverableError("Error reading from JsonReader. File was truncated.")
                                End If
                                If reader.TokenType = Global.Newtonsoft.Json.JsonToken.Null Then
                                    entity.Function = Nothing
                                Else
                                    entity.Function = ReadFunctionDescriptor(reader, readState)
                                End If
                            Case "index"
                                If Not reader.Read() Then
                                    Throw readState.OnUnrecoverableError("Error reading from JsonReader. File was truncated.")
                                End If
                                If reader.TokenType = Global.Newtonsoft.Json.JsonToken.Null Then
                                    entity.Index = Nothing
                                ElseIf reader.TokenType = Global.Newtonsoft.Json.JsonToken.StartObject Or reader.TokenType = Global.Newtonsoft.Json.JsonToken.StartArray Then
                                    readState.OnConflictingTokenType("ToolCallItem", name, reader)
                                Else
                                    entity.Index = Convert.ToInt32(reader.Value)
                                End If
                            Case "type"
                                If Not reader.Read() Then
                                    Throw readState.OnUnrecoverableError("Error reading from JsonReader. File was truncated.")
                                End If
                                If reader.TokenType = Global.Newtonsoft.Json.JsonToken.Null Then
                                    entity.Type = Nothing
                                ElseIf reader.TokenType = Global.Newtonsoft.Json.JsonToken.StartObject Or reader.TokenType = Global.Newtonsoft.Json.JsonToken.StartArray Then
                                    readState.OnConflictingTokenType("ToolCallItem", name, reader)
                                Else
                                    entity.Type = Convert.ToString(reader.Value)
                                End If
                            Case Else
                                readState.OnMissingProperty("ToolCallItem", name, reader)
                        End Select
                    Case Global.Newtonsoft.Json.JsonToken.EndObject
                        Exit Do
                    Case Else
                        Throw readState.OnUnrecoverableError("Unexpected token while loading JObject. The reader is at unexpected position.")
                End Select
            Loop While reader.Read()

            Dim endDepth As Integer = reader.Depth
            If endDepth <> startDepth Then
                Throw readState.OnUnrecoverableError("Error reading from JsonReader. The reader is at unexpected position.")
            End If

            Return entity
        End Function ' ReadToolCallItem
        ''' <summary>
        ''' Reads <see cref="FunctionDescriptor"/> from JsonReader.
        ''' </summary>
        Private Shared Function ReadFunctionDescriptor(reader As Global.Newtonsoft.Json.JsonReader, readState As JsonReadErrorHandler) As FunctionDescriptor
            If reader.TokenType = Global.Newtonsoft.Json.JsonToken.None Then
                reader.Read()
            End If

            If reader.TokenType <> Global.Newtonsoft.Json.JsonToken.StartObject Then
                readState.OnConflictingTokenType("FunctionDescriptor", JsonReadErrorHandler.Positions.StartObject, reader)
                Return Nothing
            End If

            Dim entity As New FunctionDescriptor

            Dim startDepth As Integer = reader.Depth
            If Not reader.Read() Then
                Throw readState.OnUnrecoverableError("Error reading from JsonReader. File was truncated.")
            End If

            Do
                Select Case reader.TokenType
                    Case Global.Newtonsoft.Json.JsonToken.PropertyName
                        Dim name As String = CType(reader.Value, String)
                        Select Case name
                            Case "name"
                                If Not reader.Read() Then
                                    Throw readState.OnUnrecoverableError("Error reading from JsonReader. File was truncated.")
                                End If
                                If reader.TokenType = Global.Newtonsoft.Json.JsonToken.Null Then
                                    entity.Name = Nothing
                                ElseIf reader.TokenType = Global.Newtonsoft.Json.JsonToken.StartObject Or reader.TokenType = Global.Newtonsoft.Json.JsonToken.StartArray Then
                                    readState.OnConflictingTokenType("FunctionDescriptor", name, reader)
                                Else
                                    entity.Name = Convert.ToString(reader.Value)
                                End If
                            Case "arguments"
                                If Not reader.Read() Then
                                    Throw readState.OnUnrecoverableError("Error reading from JsonReader. File was truncated.")
                                End If
                                If reader.TokenType = Global.Newtonsoft.Json.JsonToken.Null Then
                                    entity.Arguments = Nothing
                                ElseIf reader.TokenType = Global.Newtonsoft.Json.JsonToken.StartObject Or reader.TokenType = Global.Newtonsoft.Json.JsonToken.StartArray Then
                                    readState.OnConflictingTokenType("FunctionDescriptor", name, reader)
                                Else
                                    entity.Arguments = Convert.ToString(reader.Value)
                                End If
                            Case Else
                                readState.OnMissingProperty("FunctionDescriptor", name, reader)
                        End Select
                    Case Global.Newtonsoft.Json.JsonToken.EndObject
                        Exit Do
                    Case Else
                        Throw readState.OnUnrecoverableError("Unexpected token while loading JObject. The reader is at unexpected position.")
                End Select
            Loop While reader.Read()

            Dim endDepth As Integer = reader.Depth
            If endDepth <> startDepth Then
                Throw readState.OnUnrecoverableError("Error reading from JsonReader. The reader is at unexpected position.")
            End If

            Return entity
        End Function ' ReadFunctionDescriptor
        ''' <summary>
        ''' Reads <see cref="WebSearchResponse"/> from JsonReader.
        ''' </summary>
        Private Shared Function ReadWebSearchResponse(reader As Global.Newtonsoft.Json.JsonReader, readState As JsonReadErrorHandler) As WebSearchResponse
            If reader.TokenType = Global.Newtonsoft.Json.JsonToken.None Then
                reader.Read()
            End If

            If reader.TokenType <> Global.Newtonsoft.Json.JsonToken.StartObject Then
                readState.OnConflictingTokenType("WebSearchResponse", JsonReadErrorHandler.Positions.StartObject, reader)
                Return Nothing
            End If

            Dim entity As New WebSearchResponse

            Dim startDepth As Integer = reader.Depth
            If Not reader.Read() Then
                Throw readState.OnUnrecoverableError("Error reading from JsonReader. File was truncated.")
            End If

            Do
                Select Case reader.TokenType
                    Case Global.Newtonsoft.Json.JsonToken.PropertyName
                        Dim name As String = CType(reader.Value, String)
                        Select Case name
                            Case "icon"
                                If Not reader.Read() Then
                                    Throw readState.OnUnrecoverableError("Error reading from JsonReader. File was truncated.")
                                End If
                                If reader.TokenType = Global.Newtonsoft.Json.JsonToken.Null Then
                                    entity.Icon = Nothing
                                ElseIf reader.TokenType = Global.Newtonsoft.Json.JsonToken.StartObject Or reader.TokenType = Global.Newtonsoft.Json.JsonToken.StartArray Then
                                    readState.OnConflictingTokenType("WebSearchResponse", name, reader)
                                Else
                                    entity.Icon = Convert.ToString(reader.Value)
                                End If
                            Case "title"
                                If Not reader.Read() Then
                                    Throw readState.OnUnrecoverableError("Error reading from JsonReader. File was truncated.")
                                End If
                                If reader.TokenType = Global.Newtonsoft.Json.JsonToken.Null Then
                                    entity.Title = Nothing
                                ElseIf reader.TokenType = Global.Newtonsoft.Json.JsonToken.StartObject Or reader.TokenType = Global.Newtonsoft.Json.JsonToken.StartArray Then
                                    readState.OnConflictingTokenType("WebSearchResponse", name, reader)
                                Else
                                    entity.Title = Convert.ToString(reader.Value)
                                End If
                            Case "link"
                                If Not reader.Read() Then
                                    Throw readState.OnUnrecoverableError("Error reading from JsonReader. File was truncated.")
                                End If
                                If reader.TokenType = Global.Newtonsoft.Json.JsonToken.Null Then
                                    entity.Link = Nothing
                                ElseIf reader.TokenType = Global.Newtonsoft.Json.JsonToken.StartObject Or reader.TokenType = Global.Newtonsoft.Json.JsonToken.StartArray Then
                                    readState.OnConflictingTokenType("WebSearchResponse", name, reader)
                                Else
                                    entity.Link = Convert.ToString(reader.Value)
                                End If
                            Case "media"
                                If Not reader.Read() Then
                                    Throw readState.OnUnrecoverableError("Error reading from JsonReader. File was truncated.")
                                End If
                                If reader.TokenType = Global.Newtonsoft.Json.JsonToken.Null Then
                                    entity.Media = Nothing
                                ElseIf reader.TokenType = Global.Newtonsoft.Json.JsonToken.StartObject Or reader.TokenType = Global.Newtonsoft.Json.JsonToken.StartArray Then
                                    readState.OnConflictingTokenType("WebSearchResponse", name, reader)
                                Else
                                    entity.Media = Convert.ToString(reader.Value)
                                End If
                            Case "content"
                                If Not reader.Read() Then
                                    Throw readState.OnUnrecoverableError("Error reading from JsonReader. File was truncated.")
                                End If
                                If reader.TokenType = Global.Newtonsoft.Json.JsonToken.Null Then
                                    entity.Content = Nothing
                                ElseIf reader.TokenType = Global.Newtonsoft.Json.JsonToken.StartObject Or reader.TokenType = Global.Newtonsoft.Json.JsonToken.StartArray Then
                                    readState.OnConflictingTokenType("WebSearchResponse", name, reader)
                                Else
                                    entity.Content = Convert.ToString(reader.Value)
                                End If
                            Case Else
                                readState.OnMissingProperty("WebSearchResponse", name, reader)
                        End Select
                    Case Global.Newtonsoft.Json.JsonToken.EndObject
                        Exit Do
                    Case Else
                        Throw readState.OnUnrecoverableError("Unexpected token while loading JObject. The reader is at unexpected position.")
                End Select
            Loop While reader.Read()

            Dim endDepth As Integer = reader.Depth
            If endDepth <> startDepth Then
                Throw readState.OnUnrecoverableError("Error reading from JsonReader. The reader is at unexpected position.")
            End If

            Return entity
        End Function ' ReadWebSearchResponse
        ''' <summary>
        ''' Reads <see cref="ContentFilter"/> from JsonReader.
        ''' </summary>
        Private Shared Function ReadContentFilter(reader As Global.Newtonsoft.Json.JsonReader, readState As JsonReadErrorHandler) As ContentFilter
            If reader.TokenType = Global.Newtonsoft.Json.JsonToken.None Then
                reader.Read()
            End If

            If reader.TokenType <> Global.Newtonsoft.Json.JsonToken.StartObject Then
                readState.OnConflictingTokenType("ContentFilter", JsonReadErrorHandler.Positions.StartObject, reader)
                Return Nothing
            End If

            Dim entity As New ContentFilter

            Dim startDepth As Integer = reader.Depth
            If Not reader.Read() Then
                Throw readState.OnUnrecoverableError("Error reading from JsonReader. File was truncated.")
            End If

            Do
                Select Case reader.TokenType
                    Case Global.Newtonsoft.Json.JsonToken.PropertyName
                        Dim name As String = CType(reader.Value, String)
                        Select Case name
                            Case "role"
                                If Not reader.Read() Then
                                    Throw readState.OnUnrecoverableError("Error reading from JsonReader. File was truncated.")
                                End If
                                If reader.TokenType = Global.Newtonsoft.Json.JsonToken.Null Then
                                    entity.Role = Nothing
                                ElseIf reader.TokenType = Global.Newtonsoft.Json.JsonToken.StartObject Or reader.TokenType = Global.Newtonsoft.Json.JsonToken.StartArray Then
                                    readState.OnConflictingTokenType("ContentFilter", name, reader)
                                Else
                                    entity.Role = Convert.ToString(reader.Value)
                                End If
                            Case "level"
                                If Not reader.Read() Then
                                    Throw readState.OnUnrecoverableError("Error reading from JsonReader. File was truncated.")
                                End If
                                If reader.TokenType = Global.Newtonsoft.Json.JsonToken.Null Then
                                    entity.Level = Nothing
                                ElseIf reader.TokenType = Global.Newtonsoft.Json.JsonToken.StartObject Or reader.TokenType = Global.Newtonsoft.Json.JsonToken.StartArray Then
                                    readState.OnConflictingTokenType("ContentFilter", name, reader)
                                Else
                                    entity.Level = Convert.ToInt32(reader.Value)
                                End If
                            Case Else
                                readState.OnMissingProperty("ContentFilter", name, reader)
                        End Select
                    Case Global.Newtonsoft.Json.JsonToken.EndObject
                        Exit Do
                    Case Else
                        Throw readState.OnUnrecoverableError("Unexpected token while loading JObject. The reader is at unexpected position.")
                End Select
            Loop While reader.Read()

            Dim endDepth As Integer = reader.Depth
            If endDepth <> startDepth Then
                Throw readState.OnUnrecoverableError("Error reading from JsonReader. The reader is at unexpected position.")
            End If

            Return entity
        End Function ' ReadContentFilter
        ''' <summary>
        ''' Reads array of <see cref="ResponseChoiceItem"/> from JsonReader.
        ''' </summary>
        Private Shared Function ReadIReadOnlyListOfResponseChoiceItem(reader As Global.Newtonsoft.Json.JsonReader, readState As JsonReadErrorHandler) As IReadOnlyList(Of ResponseChoiceItem)
            If reader.TokenType = Global.Newtonsoft.Json.JsonToken.None Then
                If Not reader.Read() Then
                    Throw readState.OnUnrecoverableError("Error reading JArray from JsonReader.")
                End If
            End If

            If reader.TokenType <> Global.Newtonsoft.Json.JsonToken.StartArray Then
                readState.OnConflictingTokenType("IReadOnlyListOfResponseChoiceItem", JsonReadErrorHandler.Positions.StartArray, reader)
                Return Nothing
            End If

            Dim entityList As New List(Of ResponseChoiceItem)
            Dim startDepth As Integer = reader.Depth

            If Not reader.Read() Then
                Throw readState.OnUnrecoverableError("Error reading from JsonReader. File was truncated.")
            End If

            Do
                Dim item As ResponseChoiceItem
                Select Case reader.TokenType
                    Case Global.Newtonsoft.Json.JsonToken.StartObject
                        item = ReadResponseChoiceItem(reader, readState)
                    Case Global.Newtonsoft.Json.JsonToken.Null
                        item = Nothing
                    Case Global.Newtonsoft.Json.JsonToken.EndArray
                        Exit Do
                    Case Else
                        readState.OnConflictingTokenType("IReadOnlyListOfResponseChoiceItem", JsonReadErrorHandler.Positions.ArrayElement, reader)
                        item = Nothing
                End Select
                entityList.Add(item)
            Loop While reader.Read()

            Dim endDepth As Integer = reader.Depth

            If endDepth <> startDepth Then
                Throw readState.OnUnrecoverableError("Error reading from JsonReader. The reader is at unexpected position.")
            End If

            Return entityList
        End Function
        ''' <summary>
        ''' Reads array of <see cref="ToolCallItem"/> from JsonReader.
        ''' </summary>
        Private Shared Function ReadIReadOnlyListOfToolCallItem(reader As Global.Newtonsoft.Json.JsonReader, readState As JsonReadErrorHandler) As IReadOnlyList(Of ToolCallItem)
            If reader.TokenType = Global.Newtonsoft.Json.JsonToken.None Then
                If Not reader.Read() Then
                    Throw readState.OnUnrecoverableError("Error reading JArray from JsonReader.")
                End If
            End If

            If reader.TokenType <> Global.Newtonsoft.Json.JsonToken.StartArray Then
                readState.OnConflictingTokenType("IReadOnlyListOfToolCallItem", JsonReadErrorHandler.Positions.StartArray, reader)
                Return Nothing
            End If

            Dim entityList As New List(Of ToolCallItem)
            Dim startDepth As Integer = reader.Depth

            If Not reader.Read() Then
                Throw readState.OnUnrecoverableError("Error reading from JsonReader. File was truncated.")
            End If

            Do
                Dim item As ToolCallItem
                Select Case reader.TokenType
                    Case Global.Newtonsoft.Json.JsonToken.StartObject
                        item = ReadToolCallItem(reader, readState)
                    Case Global.Newtonsoft.Json.JsonToken.Null
                        item = Nothing
                    Case Global.Newtonsoft.Json.JsonToken.EndArray
                        Exit Do
                    Case Else
                        readState.OnConflictingTokenType("IReadOnlyListOfToolCallItem", JsonReadErrorHandler.Positions.ArrayElement, reader)
                        item = Nothing
                End Select
                entityList.Add(item)
            Loop While reader.Read()

            Dim endDepth As Integer = reader.Depth

            If endDepth <> startDepth Then
                Throw readState.OnUnrecoverableError("Error reading from JsonReader. The reader is at unexpected position.")
            End If

            Return entityList
        End Function
        ''' <summary>
        ''' Reads <see cref="DictionaryOfStringAndString"/> from JsonReader.
        ''' </summary>
        Private Shared Function ReadDictionaryOfStringAndString(reader As Global.Newtonsoft.Json.JsonReader, readState As JsonReadErrorHandler) As Dictionary(Of String, String)
            If reader.TokenType = Global.Newtonsoft.Json.JsonToken.None Then
                reader.Read()
            End If

            If reader.TokenType <> Global.Newtonsoft.Json.JsonToken.StartObject Then
                readState.OnConflictingTokenType("DictionaryOfStringAndString", JsonReadErrorHandler.Positions.StartObject, reader)
                Return Nothing
            End If

            Dim entity As New Dictionary(Of String, String)

            Dim startDepth As Integer = reader.Depth
            If Not reader.Read() Then
                Throw readState.OnUnrecoverableError("Error reading from JsonReader. File was truncated.")
            End If

            Do
                Select Case reader.TokenType
                    Case Global.Newtonsoft.Json.JsonToken.PropertyName
                        Dim name As String = CType(reader.Value, String)
                        If Not reader.Read() Then
                            Throw readState.OnUnrecoverableError("Error reading from JsonReader. File was truncated.")
                        End If
                        If reader.TokenType = Global.Newtonsoft.Json.JsonToken.Null Then
                            entity(name) = Nothing
                        ElseIf reader.TokenType = Global.Newtonsoft.Json.JsonToken.StartObject Or reader.TokenType = Global.Newtonsoft.Json.JsonToken.StartArray Then
                            readState.OnConflictingTokenType("DictionaryOfStringAndString", name, reader)
                        Else
                            entity(name) = Convert.ToString(reader.Value)
                        End If

                    Case Global.Newtonsoft.Json.JsonToken.EndObject
                        Exit Do
                    Case Else
                        Throw readState.OnUnrecoverableError("Unexpected token while loading JObject. The reader is at unexpected position.")
                End Select
            Loop While reader.Read()

            Dim endDepth As Integer = reader.Depth
            If endDepth <> startDepth Then
                Throw readState.OnUnrecoverableError("Error reading from JsonReader. The reader is at unexpected position.")
            End If

            Return entity
        End Function ' ReadDictionaryOfStringAndString

    End Class ' ResponseReader
End Namespace
