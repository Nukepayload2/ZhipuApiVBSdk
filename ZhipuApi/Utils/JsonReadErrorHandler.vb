' <auto-generated>
' This source file is part of the JSON serialization code and is not intended to be modified by you.
' Re-run the source generator will overwrite your changes in this file.
' Generated by: Nukepayload2.IO.Json.Serialization.NewtonsoftJson

Namespace Global.Nukepayload2.IO.Json.Serialization.NewtonsoftJson
    ''' <summary>
    ''' Handles recoverable JSON errors and throws when the error is unrecoverable.
    ''' </summary>
    Public Class JsonReadErrorHandler

        ''' <summary>
        ''' Contains the positions that the JSON deserializer can be in when a conflicting token type is encountered.
        ''' </summary>
        Public Class Positions
            Public Shared ReadOnly StartObject As String = "#StartObject"
            Public Shared ReadOnly StartArray As String = "#StartArray"
            Public Shared ReadOnly ArrayElement As String = "#ArrayElement"
            Public Shared ReadOnly JTokenDiscriminator As String = "#JTokenDiscriminator"
        End Class

        ''' <summary>
        ''' Called when the JSON deserializer encounters a conflicting token type.
        ''' </summary>
        ''' <param name="typeName">The type that has JToken conflicts.</param>
        ''' <param name="position">If it starts with "#", it's JSON deserializer position name (in <see cref="Positions"/>).
        ''' Otherwise, it's property name.</param>
        ''' <param name="reader">The reader is used to skip unexpected tokens. Not nullable.</param>
        Public Overridable Sub OnConflictingTokenType(typeName As String, position As String, reader As Global.Newtonsoft.Json.JsonReader)
            Debug.WriteLine(GetConflictingTokenTypeMessage(typeName, position, reader.TokenType))
            If reader.TokenType = Newtonsoft.Json.JsonToken.EndObject OrElse reader.TokenType = Newtonsoft.Json.JsonToken.EndArray Then
                Throw OnUnrecoverableError("Unexpected end of JSON while loading " & typeName)
            End If
            reader.Skip()
        End Sub

        Private Function GetConflictingTokenTypeMessage(typeName As String, position As String, actualToken As Global.Newtonsoft.Json.JsonToken) As String
            Return $"Unknown token type '{actualToken}' at '{position}' while loading '{typeName}'. This problem indicates that the JSON doesn't match the JSON schema."
        End Function

        ''' <summary>
        ''' Called when the JSON deserializer is unable to continue reading.<br/>
        ''' Common reasons:<br/>
        ''' The file is corrupted.<br/>
        ''' The JsonReadErrorHandler implementation is incorrect.<br/>
        ''' Design-time converters have bugs.<br/>
        ''' The source generator is in the middle state of development.
        ''' </summary>
        ''' <param name="message">The error message.</param>
        ''' <exception cref="FormatException">This method always throws this exception.</exception>
        Public Overridable Function OnUnrecoverableError(message As String) As Exception
            Return New FormatException(message)
        End Function

        Public Overridable Sub OnMissingProperty(typeName As String, propertyName As String, reader As Global.Newtonsoft.Json.JsonReader)
            Debug.WriteLine(GetMissingPropertyMessage(typeName, propertyName))
            If reader IsNot Nothing Then
                reader.Skip()
            End If
        End Sub

        Protected Shared Function GetMissingPropertyMessage(typeName As String, propertyName As String) As String
            Return $"Unknown property '{propertyName}' while loading '{typeName}'. This problem indicates that the JSON doesn't match the JSON schema."
        End Function

    End Class

End Namespace
